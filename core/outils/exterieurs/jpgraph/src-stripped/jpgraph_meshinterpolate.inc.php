<?php
 function doMeshInterpolate( &$aData, $aFactor ) { $m = new MeshInterpolate(); $aData = $m->Linear($aData,$aFactor); } class MeshInterpolate { private $data = array(); function IntSquare( $aRow, $aCol, $aFactor ) { if ( $aFactor <= 1 ) return; $step = pow( 2, $aFactor-1 ); $v0 = $this->data[$aRow][$aCol]; $v1 = $this->data[$aRow][$aCol + $step]; $v2 = $this->data[$aRow + $step][$aCol]; $v3 = $this->data[$aRow + $step][$aCol + $step]; $this->data[$aRow][$aCol + $step / 2] = ( $v0 + $v1 ) / 2; $this->data[$aRow + $step / 2][$aCol] = ( $v0 + $v2 ) / 2; $this->data[$aRow + $step][$aCol + $step / 2] = ( $v2 + $v3 ) / 2; $this->data[$aRow + $step / 2][$aCol + $step] = ( $v1 + $v3 ) / 2; $this->data[$aRow + $step / 2][$aCol + $step / 2] = ( $v0 + $v1 + $v2 + $v3 ) / 4; $this->IntSquare( $aRow, $aCol, $aFactor-1 ); $this->IntSquare( $aRow, $aCol + $step / 2, $aFactor-1 ); $this->IntSquare( $aRow + $step / 2, $aCol, $aFactor-1 ); $this->IntSquare( $aRow + $step / 2, $aCol + $step / 2, $aFactor-1 ); } function Linear( &$aData, $aIntFactor ) { $step = pow( 2, $aIntFactor-1 ); $orig_cols = count( $aData[0] ); $orig_rows = count( $aData ); $p = pow( 2, $aIntFactor-1 ); $new_cols = $p * ( $orig_cols - 1 ) + 1; $new_rows = $p * ( $orig_rows - 1 ) + 1; $this->data = array_fill( 0, $new_rows, array_fill( 0, $new_cols, 0 ) ); for ( $i = 0; $i < $new_rows; $i++ ) { for ( $j = 0; $j < $new_cols; $j++ ) { $v = 0 ; if ( ( $i % $step == 0 ) && ( $j % $step == 0 ) ) { $v = $aData[$i / $step][$j / $step]; } $this->data[$i][$j] = $v; } } for ( $i = 0; $i < $new_rows-1; $i += $step ) { for ( $j = 0; $j < $new_cols-1; $j += $step ) { $this->IntSquare( $i, $j, $aIntFactor ); } } return $this->data; } } ?>
