<?php
 require_once('qrencoder.inc.php'); class Driver { private $datafile='',$data=''; function __construct($aStartMsg = null) { } function isCmdLine() { $s=php_sapi_name(); return substr($s, 0, 3) == 'cli'; } function fmtInfo($aS) { if ( !$this->isCmdLine() ) { return '<pre>' . $aS . '<pre>'; } else return $aS; } function Tst13Pattern() { $mask = QRMask::getInstance(); $mask->_setDbgLevel(2); $n=11; $m=array(); for($i=0; $i < $n; ++$i) { $m[$i] = array_fill(0,$n,QRMatrixLayout::ZERO); } $pattern = array(QRMatrixLayout::ONE, QRMatrixLayout::ZERO, QRMatrixLayout::ONE, QRMatrixLayout::ONE, QRMatrixLayout::ONE, QRMatrixLayout::ZERO, QRMatrixLayout::ZERO, QRMatrixLayout::ONE); for($j=0; $j < count($pattern); ++$j) { $m[$j+2][1] = $pattern[$j]; } $val = $mask->_eval11311Pattern($m, $n, false) ; echo $this->fmtInfo("Result: \n".$mask."\n"); } function CreateBCH155Table() { $G=array ( 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1 ); $p=array(); echo sprintf("%9s%13s%18s%28s\n","Format bits","Error bits","Combined","After XOR masking"); echo str_repeat('=',9+13+18+28+2); echo "\n"; for( $val = 0; $val <= 31; ++$val ) { Utils::Word2Bits($val, $p, 5); $nG=count($G); $pad=array_fill(0, $nG - 1, 0); $p=array_merge($p, $pad); $tmp=$p; $n=count($tmp); $k=0; while( $k < $n && $tmp[$k] == 0 ) { ++$k; } if( $k < $n ) { do { for( $i = 0; $i < $nG; ++$i ) { $tmp[$i + $k] = $tmp[$i + $k] ^ $G[$i]; } while( $k < $n && $tmp[$k] == 0 ) { ++$k; } } while ( $k + $nG - 1 < $n ); } $combined = sprintf("%05s",decbin($val)) . substr(implode($tmp),5); $fmask = '101010000010010'; $final = bindec($fmask) ^ bindec($combined); echo sprintf("%05s", decbin($val)) . "          " . $combined . "         " . sprintf("%015s",decbin($final)) . sprintf(" (%04X)",$final) . "\n" ; } } function RunTextBackend() { $e=new QREncoder($this->version, $this->errlevel); $b=BarcodeBackendFactory::Create($e, BACKEND_ASCII); $b->SetModuleWidth(1); if( $this->datafile != '') $b->StrokeFromFile($this->datafile,'',$this->debuglevel); else $b->Stroke($this->data,'',$this->debuglevel); } function RunGraphicBackend() { $e=new QREncoder($this->version, $this->errlevel); $b=BarcodeBackendFactory::Create($e, BACKEND_IMAGE); $b->SetModuleWidth(6); if( $this->datafile != '') $b->StrokeFromFile($this->datafile,'',$this->debuglevel,'qrlog.txt'); else $b->Stroke($this->data,'',$this->debuglevel,'qrlog.txt'); } function Run($aForceText=false) { $this->version = -1; ; $this->errlevel = -1; $this->debuglevel = 2; $this->data = "01234567"; try { if( $this->isCmdLine() || $aForceText ) { $this->RunTextBackend(); } else { $this->RunGraphicBackend(); } } catch( QRException $e ) { echo $this->fmtInfo("Exception: " . $e->GetMessage() ); } } } $driver=new Driver(); $driver->Run(); ?>
