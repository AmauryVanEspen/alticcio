<?php
 class Galois { private $iOrder = -1; private $iPrimPol = -1; private $iLogTable = array(); private $iInvLogTable = array(); function Galois($aN,$aPol) { $this->iOrder = 1 << $aN; $this->iPrimPol = $aPol ; $this->InitLogTables(); } function InitLogTables() { $this->iLogTable[0] = 1 - $this->iOrder; $this->iInvLogTable[0] = 1; for( $i=1; $i < $this->iOrder; ++$i ) { $this->iInvLogTable[$i] = $this->iInvLogTable[$i-1] << 1; if( $this->iInvLogTable[$i] >= $this->iOrder) { $this->iInvLogTable[$i] ^= $this->iPrimPol; } $this->iLogTable[$this->iInvLogTable[$i]] = $i; } } function InvLog($aArg) { return $this->iInvLogTable[$aArg]; } function Log($aArg) { return $this->iLogTable[$aArg]; } function Add($a,$b) { return ($a ^ $b ) & 0xFF; } function Mul($a,$b) { if( $a==0 || $b == 0 ) { return 0; } else { return $this->iInvLogTable[($this->iLogTable[$a] + $this->iLogTable[$b]) % ($this->iOrder-1)]; } } } class ReedSolomon { private $iGalois; private $iC; private $iCodeWords=-1; function __construct($aCodeWords,$aPrimPol,$aZeroStart=true,$aWordSize=8) { $this->iGalois = new Galois($aWordSize,$aPrimPol); $this->iCodeWords = $aCodeWords; $this->InitGenPolynomial($aCodeWords,$aZeroStart); } function InitGenPolynomial($aN,$aZeroStart=true) { $this->iC = array(); for($i=1; $i <= $aN; ++$i ) { $this->iC[$i] = 0; } $zstart = $aZeroStart ? 1 : 0; $this->iC[0] = 1; for( $i=1; $i <= $aN; ++$i ) { $this->iC[$i] = $this->iC[$i-1]; $alpha = $this->iGalois->InvLog($i-$zstart); for( $j=$i-1; $j >= 1; --$j ) { $this->iC[$j] = $this->iC[$j-1] ^ $this->iGalois->Mul($this->iC[$j],$alpha); } $this->iC[0] = $this->iGalois->Mul($this->iC[0],$alpha); } } function append(&$aData) { $n = count($aData); for($i=$n; $i <= ($n+$this->iCodeWords); ++$i ) $aData[$i] = 0; for($i=0; $i < $n; ++$i ) { $k = $aData[$n] ^ $aData[$i]; for($j=0; $j < $this->iCodeWords; ++$j ) { $aData[$n+$j] = $aData[$n+$j+1] ^ $this->iGalois->Mul($k,$this->iC[$this->iCodeWords-$j-1]); } } unset($aData[$n+$this->iCodeWords]); } } ?>
